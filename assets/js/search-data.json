{
  "1": {
    "title": "C++",
    "content": "C++ . . How C++ works | Hello world | Standard vector | Classes | Eigen | Where to go now | How C++ works . Warning . This section should hopefully just serve as a refresher to you. If you are completely new to C++ / C, please talk to us so we can direct you to more resources. . C++ is a high level programming language. A computer’s CPU is incapable of speaking C++. The limited set of instructions that a CPU can understand directly is called machine code. . Programs written in high level languages must be translated into machine code before they can be run. There are two primary ways this is done: compiling and interpreting. C++ is a compiled language, meaning that it has to be compiled. . . Hello world . It’s not a programming language if doesn’t allow to print “Hello World”. The very first C++ program that we will look at is one that prints this simple text to the terminal. . Create a new file called hello.cpp (try to use the terminal for this), and write the following code: . #include &lt;iostream&gt; int main(){ std::cout &lt;&lt; &quot;Hello World from VNAV 2020! n&quot;; return 0; } . Let’s have a closer look to the code. On the first line, we include the iostream header file. Header files are mechanisms in C++ through which definitions of functions and classes are exposed to different programs. The first character is the # symbol, which is a marks the statement to the preprocessor. Each time you start your compiler, the preprocessor reads through the source code, looking for lines that begin with the pound symbol (#), and acts on those lines before the compiler runs. The angle brackets around the filename tell the preprocessor to look in all the usual places for this file. If your compiler is set up correctly, the angle brackets will cause the preprocessor to look for the file iostream.h in the directory that holds all the header files in your system. Note that the header file name does not have any extension, this is true for all of the Standard Library header files. The header iostream (Input-Output-Stream) is used by std::cout, which assists with writing to the screen (console output). . Line 3 begins the actual program with a function named int main(). Every C++ program has a main() function, it in facts marks the entry point of the program. When the program starts, main() is called by the operating system. Like all functions, the main must state what kind of value it will return. The return value type for main() in int, which means that this function will a status code. All ANSI-compliant programs declare main() to return an int. This value is “returned” to the operating system when your program completes. Some programmers signal an error by returning the value 1 and success with 0. . All blocks begin with an opening brace ({) and end with a closing brace (}). The main part of our program happen on line 4. The object std::cout is used to print a message to the standard output (i.e. the terminal), you will use the std::cout a lot. Here’s how std::cout is used: type the word std::cout, followed by the output redirection operator (&lt;&lt;). Whatever follows the output redirection operator is written to the screen. If you want a string of characters written, be sure to enclose them in double quotes (&quot;). . The final two characters, n, tell cout to put a new line after the words Hello World! This special code is explained in detail when cout is discussed on Day 17. . Keep in mind. . Around the web you will commonly find using namespace std; to avoid std::. Setting the global namespace is a pretty bad practice, try to avoid it. . To run this program, we must first compile it using a C++. We will be using the C++ compiler in the GNU Compiler Collection. In your terminal run . g++ -std=c++11 -Wall -pedantic -o hello hello.cpp . we are saying to the compiler to enable the C++11 standard (-std=c++11), report all warnings (-Wall) and to strictly adhere to the standard (-pedantic). The output file will be called hello. . If everything works out fine (and it should) you can run your first C++ application! . $ ./hello Hello World from VNAV 2020! . Standard vector . Let’s move to something more, the standard vector. Vector is a template class that implements a variable length array. It allows the same natural syntax that is used with plain arrays but offers a series of services that free the C++ programmer from taking care of the allocated memory and help operating consistently on the contained objects. . The first step using vector is to include the appropriate header: . #include &lt;vector&gt; . There are multiple ways to initialize a vector, the simplest is the following: . std::vector&lt;T&gt; vect; . This widely used notation, T stands for any data type, built-in, or user-defined class. The vector will store the Ts in a contiguous memory area that it will handle for us, and let us access the individual T simply by writing vect[0], vect[1], and so on, exactly like we would do for a C-style array. . Another very useful way to initialize it is the following . std::vector&lt;T&gt; histo(int size, T initial_value); . In this case we are saying to create a vector of size-elements, each initialized with the value initial_value. . Keep in mind. . You can access the vector elements with the square brackets but this will not check if the index is out of bound, it is better to use the at method, e.g. v.at(0) since it will throw an exception if the index is out of bound. . If we do not pre-initialize the vector we must add elements one by one. To add at the end of the vector we can use the push_back(T elem) method. For example we can declare a vector of integers and fill it with 5 random number in the interval 0-99: . // Create a vector containing integers std::vector&lt;int&gt; vec; // Fill the vector with random number in [0, 99] for (auto i = 1; i &lt;= 5; ++i){ vec.push_back(rand() % 100); } . The current size of the vector can be retrieved with the method size() . std::cout &lt;&lt; &quot;Vector size: &quot; &lt;&lt; vec.size() &lt;&lt; std::endl; . The information can be used to access all the elements of the vector: . for(int i = 1; i &lt; vec.size(); ++i){ std::cout &lt;&lt; vec.at(i) &lt;&lt; &quot; &quot;; } . We could have done it in a slight better way (exploiting C++11 feature) using the ranged-based for loops: . for (auto &amp;elem: vec){ std::cout &lt;&lt; elem &lt;&lt; &quot; &quot;; } . Note two important things: . We used the keyword auto. For variables, specifies that the type of the variable that is being declared will be automatically deduced. Use it whenever it is clear to understand the type since it allows several optimization from the compiler. | We used the operator &amp; before the name of the variable. This marks the variable as reference to the original value and therefore avoids the copy of the element. | The complete code that declare, initialize and print a vector is listed below . #include &lt;cstdlib&gt; // required for rand #include &lt;iostream&gt; #include &lt;vector&gt; int main(){ // initialize rand with constant seed for reproducibility std::srand(314159); // Create a vector containing integers std::vector&lt;int&gt; vec; // Fill the vector with random number in [0, 99] for (auto i = 1; i &lt;= 5; ++i) vec.push_back(rand() % 100); // Print number of elements in the vector to screen std::cout &lt;&lt; &quot;Vector size: &quot; &lt;&lt; vec.size() &lt;&lt; std::endl; // Print all elements to screen std::cout &lt;&lt; &quot;Vector elements: &quot;; for (auto &amp;elem: vec) std::cout &lt;&lt; elem &lt;&lt; &quot; &quot;; std::cout &lt;&lt; std::endl; return 0; } . If you compile and run this code you will see something like . $ ./ex1 Vector size: 5 Vector elements: 19 10 47 39 39 . Classes . C++ is an object-oriented programming language. The main entity of objects are classes. You can think of a class like it was a new data type (like int or double) containing several variables (of different types, called members) and some functions (called methods). . For example you can think to a new type called Circle. A circle has a radius (an intrinsic property), and several functions apply to a circle like computing the circumference and the area. . Declaring a class is very easy . class Circle{}; . With the simple statement we create a class named Circle. Being a new data type we can instantiate a class in the same way we instantiate an integer . Circle c; . The class so far is not very useful, it does not contain any members or methods. To add the member radius we need to change the declaration of the class . class Circle{ double radius; } . Now we have a member but if you try to modify the value you will discover that you cannot: this happens because by default members are declared private, so nobody expect the class methods can change its value. To set the value we need a class constructor. The class constructor is simply a method (without return value) with the same name of the class . class Circle{ double radius; public: Circle(double rad){ radius = rad; } } . As you see now we declared the constructor under the public keyword. It is called access specifier and says who can access members and methods. . Moreover. . We can also declare a member to be public, and in this case it would have been a good idea. In strict object-oriented programming this is usually avoided because if we allow the user to directly change the class properties we lose the opportunity to perform any book-keeping on the class itself (e.g. maybe we have to update other properties when we change the radius of the circle). . Using the same approach of the constructor we can add two more methods: double circumference() and double area() . #include &lt;cmath&gt; // required for pow and M_PI #include &lt;iostream&gt; class Circle{ double radius; public: Circle(double r) { radius = r; } double circumference(){ return 2*M_PI*radius; } double area(){ return M_PI*std::pow(radius,2); } }; int main(){ Circle circ(3); std::cout &lt;&lt; &quot;Circumference: &quot; &lt;&lt; circ.circumference() &lt;&lt; std::endl; std::cout &lt;&lt; &quot;Area: &quot; &lt;&lt; circ.area() &lt;&lt; std::endl; return 0; } . If you compile and run the code above, you should see something like: . $ ./ex2 Circumference: 18.8496 Area: 28.2743 . Eigen . Now that we’ve covered some of the basics syntax of C++, it’s time to take a look at some of the existing libraries out there that will help us throughout this course. Eigen, a fast header-only linear algebra library, is the one we will try out right now. To install Eigen, it is very simple: . sudo apt install libeigen3-dev . What this command does is that it will download all relevant Eigen header files to a folder that will be searched by compilers. In the case of Ubuntu, Eigen’s header files will be downloaded to /usr/include/eigen3 or /usr/local/include/eigen3. . Here’s an example from Eigen’s documentation that will get you started: . #include &lt;iostream&gt; #include &lt;Eigen/Dense&gt; int main() { Eigen::MatrixXd m(2,2); m(0,0) = 3; m(1,0) = 2.5; m(0,1) = -1; m(1,1) = m(1,0) + m(0,1); std::cout &lt;&lt; m &lt;&lt; std::endl; } . Let’s take a look at this example line-by-line. First, we include the &lt;iostream&gt; header for printing to our terminal, which should be familiar to you now. Next, we include the &lt;Eigen/Dense&gt; header, which defines member functions and types that work with dense matrices. &lt;Eigen/Dense&gt; is one of the many modules Eigen provides. If you are interested in learning more, please check out this page. . In the main function, we first declare a variable called m of type Eigen::MatrixXd. The Eigen:: part represents the namespace in which Eigen’s functions and types live. MatrixXd represents a matrix of arbitrary size (notice the X in MaxtriXd), and each entry in the matrix is of type double (hence the d in MatrixXd). We use MatrixXd’s constructor to set the matrix to be 2-by-2. We then use the () operator to set all entries. As usual in computer science, the index of the first entry is 0, instead of 1. The final line in the main function prints the matrix to the standard output stream. . To compile it, assuming it’s saved in a file named eigen-example.cpp, you simply need to run: . g++ -o eigen-example eigen-example.cpp . You should see the following after executing the code above: . $ ./eigen-example 3 -1 2.5 1.5 . Where to go now . C++ is a complex language with many interesting features, we encurage you take a look at the following resources if you want to dive deeper: . Modern C++ Course (Cyrill Stachniss) | Effective Modern C++ | C++ Reference | .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/cpp",
    "relUrl": "/lab1/cpp"
  },
  "2": {
    "title": "Exercises",
    "content": "Exercises . Submission . To submit your solutions you are required to create a repository in the VNAV2020-Submissions organization in github.mit.edu (this will be your first exercise). . VNAV staff will clone your repository from github.mit.edu on September 9 at midnight (11:59 EDT). This will be considered as your submission and will be graded accordingly. . Late Submission. . We will assume your repository is ready to be graded at the deadline, so please email us if you want to submit later than the deadline. . Exercises . Git (5 pts) . In this exercise you are required to set a git repository inside the VNAV2020-Submission organization. This is require for the correct submission of all the exercises of the class. . Create a repository for your personal submissions Go to https://github.mit.edu/organizations/VNAV2020-submissions/repositories/new to create a new repository | Create a new Private repository and call it as your Kerberos username, e.g. if your MIT email is astark@mit.edu, call it astark | Clone the repository to ~/vnav-personal (you will have a team submission later) running git clone git@github.mit.edu:VNAV2020-submissions/YOUR_USERNAME.git ~/vnav-personal (replace YOUR_USERNAME with the name of the repo you just created) | Create a folder called lab1 | . | Clone https://github.mit.edu/VNAV2020/labs in a folder of your choice | You are required to put your solutions in the repository you created in the first Git exercise. . Warning. . If you created the repository in your personal account instead of VNAV2020-submissions you need to transfer the ownership in order to complete your submission. Scroll to the bottom of the page for instructions. . Shell (35 pts) . Exercise 1 - Answer to the following questions Download https://raw.githubusercontent.com/dlang/druntime/master/benchmark/extra-files/dante.txt (try using wget) | Create a file called exercise1.txt in ~/vnav-personal/lab1 and answer to the following questions How many lines does it contains? | How many words does it contains? | How many lines are not blank? | | Push the file to git | . | Exercise 2 - Output redirecting Install fortune-mod using apt | After installation, type fortune in your terminal to see a (hopefully) interesting proverb/quote | Run fortune 5 more times and each time redirect the output to a file called fortunes.txt in ~/vnav-personal/lab1 (Hint: do not recreate the file 5 times - each time a new proverb should be added to the end of fortunes.txt) | Push the file to git | . | Hint: For the first exercise you might want to use the command wc (Word Count). . C++: Warm-up Exercises (20 pts) . Feel free to refer to this when answering the following questions. Some of the questions below are based on C++ Primer, which is also an excellent resource for C++ programming. Put all answers into a text file called cpp-warmup.txt and push it to git. . Operators . What are the values of i and j after running the following code? int i = 0, j; j = ++i; j = i++; . | What does the following code print? int i = 42; string output = (i &lt; 42) ? &quot;a&quot; : &quot;b&quot; std::cout &lt;&lt; output &lt;&lt; std::endl; . | References and Pointers . What does the following code print? int i; int&amp; ri = i; i = 5; ri = 10; std::cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; ri &lt;&lt; std::endl; . | What does the following code print? int i = 42; int* j = &amp;i; *j = *j**j; std::cout &lt;&lt; *j &lt;&lt; std::endl; . | What does the following code print? int i[4] = {42,24,42,24}; *(i+2) = *(i+1)-i[3]; std::cout &lt;&lt; *(i+2) &lt;&lt; std::endl; . | What does the following code print? | void reset(int &amp;i) { i = 0; } int j = 42; reset(j); std::cout &lt;&lt; j &lt;&lt; std::endl; . Numbers . What are the differences between int, long, long long, and short? | What are the differences between a float and double? What is the value of i after running the following code snippet? int i; i = 3.14; . | What are the differences between an unsigned and signed type? What is the value of c in the following code snippet assuming chars are 8-bit? unsigned char c = -1; . | What will the value of i be after running the following code snippet? int i = 42; if (i) { i = 0; } else { i = 43; } . | C++: RandomVector (40 pts) . In this exercise we will implement the class RandomVector. Inside ~/vnav-personal/lab1 create a folder called RandomVector and copy the content from https://github.mit.edu/VNAV2020/Labs/tree/master/lab1. . The class RandomVector defined in the header file random_vector.h abstract a vector of doubles. You are required to implement the following methods: . RandomVector(int size, double max_val = 1) (constructor): initialize a vector of doubles of size size with random values between 0 and max_val (default value 1) | double mean() returns the mean of the values in random vector | double max() returns the max of the values in random vector | double min() returns the min of the values in random vector | void print() prints all the values in the random vector | void printHistogram(int bins) computes the histogram of the values using bins number of bins between min() and max() and print the histogram itself (see the example below). | . To to so complete all the TODOs in the file random_vector.cpp. When you are done compile the application by running . g++ -std=c++11 -Wall -pedantic -o random_vector main.cpp random_vector.cpp . Note: we expect you to not use the function from the &lt;algorithm&gt; header. . If you complete correctly the exercise you should see something like . $ ./random_vector 0.458724 0.779985 0.212415 0.0667949 0.622538 0.999018 0.489585 0.460587 0.0795612 0.185496 0.629162 0.328032 0.242169 0.139671 0.453804 0.083038 0.619352 0.454482 0.477426 0.0904966 Mean: 0.393617 Min: 0.0667949 Max: 0.999018 Histogram: *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** . Optional (10 pts): Try to implement the methods with and without the functions available in the header &lt;algorithm&gt;. . . Transfer ownership of Git repository . If you created the repository in your personal account instead of VNAV2020-submissions you might want to transfer the ownership in order to complete your submission. . On GitHub, navigate to the main page of the repository. | Under your repository name, click Settings. | Scroll down until your reach the Danger Zone, then click Transfer. | Type the name of your repository in the first row and VNAV2020-submissions in the second, then click I understand, transfer this repository. | Done! |",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/exercises",
    "relUrl": "/lab1/exercises"
  },
  "3": {
    "title": "Git",
    "content": "Git . . Intro | Getting started | Merge Conflict with an Imaginary Collaborator | Intro . The following are selected chapters from Pro Git, if you are new to Git please read carefully these chapters as they pose the foundation of git. . Getting Started | Getting a Git Repository | Recording Changes to the Repository | Viewing the Commit History | Undoing Things | Working with Remotes | Branches in a Nutshell | Basic Branching and Merging | Branch Management | Branching Workflows | Remote Branches | Also visit Git command reference to get help with commands and command syntax. . . The following exercises are designed to help you to experiment and learn how these commands are used in practice. . Getting started . Install Git with (requires internet connection). For this you need to update APT cache and then install the git-core package | Add your name/email to your Git configuration (system-wide) | git config --global user.name YOUR_NAME git config --global user.email YOUR_MIT_EMAIL_ADDRESS . Generate SSH keys (do not forget the passphrase if you choose to set one) | Add SSH keys to your github.mit.edu account | Create a new repository on https://github.mit.edu | Open a terminal and create a new directory using mkdir named vnav19 in your HOME directory | Clone your (empty) Git repo (earn street cred by calling by using “repo” instead of “repository”) | git clone git@github.mit.edu:USERNAME/REPO.git . Merge Conflict with an Imaginary Collaborator . Now we simulate a common situation that arises when two or more people use the same repo. . Navigate to your repo and create new me.txt with your name and MIT email, e.g. $ cat me.txt Jon Snow lordsnow@mit.edu . | Check the status with git status | Add (stage), check the status, commit and push your changes – commit message can be “Added my email” add me.txt git status git commit -m &quot;Added my email&quot; git push . | Inspect the log with git log | Now you can go to your repo’s page on Github and inspect the commit history and contents of your repo. . Let’s continue editing the files . Let’s create a new branch git checkout -b new_branch_to_merge_later . | Edit the file me.txt with completely different content, e.g. $ cat me.txt Arya Stark astark@mit.edy . | Add (stage), check the status, and commit your changes (you can push too if you want) – commit message can be “Somebody added another email” | Now switch branch to master with git checkout master | Inspect the output of git log --graph --oneline --all | Append your course number to the file $ echo &quot;Course 16&quot; &gt;&gt; me.txt $ cat me.txt Jon Snow lordsnow@mit.edu Course 16 . | Add (stage), check the status, and commit your changes – commit message can be “Added my course number” | Merge the two branches $ git merge new_branch_to_merge_later Auto-merging me.txt CONFLICT (content): Merge conflict in me.txt Automatic merge failed; fix conflicts and then commit the result. . | BOOM 💥. A conflict appears. Thanks, Git for letting us know about this! Let’s resolve the conflict . Inspect the file me.txt, you should see something like - Git helps us by marking the conflict region with special characters: HEAD refers to your current branch/commit and below the ======= the other commit $ cat me.txt &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Jon Snow lordsnow@mit.edu Course 16 ======= Arya Stark astark@mit.edu &gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch_to_merge_later . | In this case, we would like to have Jon name so we simply remove everything else (including &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD) from the file | After resolving the conflict, it is time to stage our file and create our merge commit - inspect the log, see the diff, and check the status git add me.txt git commit -m &quot;Merge commit&quot; git push . | Inspect the output of git log --graph --oneline --all | Inspect the output of git diff HEAD~2 - what does this command do? |",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/git",
    "relUrl": "/lab1/git"
  },
  "4": {
    "title": "How to print",
    "content": "How to print . To print a page of this website it is suggested to enable the reader before printing it . Safari: Shift+CMD+R | Firefox Widnows: CTRL+Alt+R | Mac OS: CMD+Alt+R | . | Chrome (should work directly with print) | .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/about",
    "relUrl": "/about"
  },
  "5": {
    "title": "Home",
    "content": "16.485 - Visual Navigation for Autonomous Vehicles (2020) . . Learn about the mathematical foundations of visual navigation (spanning from geometry to optimization), state-of-the-art algorithms, and software packages. . In this pages you will find tutorials and exercises from the class. .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/",
    "relUrl": "/"
  },
  "6": {
    "title": "Lab 1",
    "content": "Lab 1 . In this lab we will install Ubuntu 18.04, learns the shell basics and write our first C++ programs. .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/",
    "relUrl": "/lab1/"
  },
  "7": {
    "title": "Shell basics",
    "content": "Shell basics . . Exploring the Filesystem pwd | ls File permissions and ownership | | cd | find | | Edit Filesystem mkdir | touch | rm | cp | mv | | Viewing and Editing Files cat | nano and vim | | Download, uncompress and execute a script Download | Uncompress | Run | | Pipe | Output redirect | Superuser | Install packages | Get help | Exploring the Filesystem . pwd . Modern filesystems are organized in folders, being able to navigate the filesystem is fundamental. Everytime we work with the shell we are within one folder, to know where we are we can use the command pwd (Print Working Directory): . $ pwd /home/username/vnav2020/lab1 . where username is the login username you set. . ls . To list the contents of the current directory (files and/or child directories, etc.) we use ls (LiSt) . $ ls ex0.cpp ex1.cpp ex2.cpp final.cpp . File permissions and ownership . The concept of permissions and ownership is crucial in anu unix system. Every to file and directory is assigned 3 types of owner: . User: is the owner of the file, by default, the person who created a file | Group: user-group can contain multiple users, all users belonging to a group will have the same access permissions to the file | Other: Any other user who has access to a file | . At the same time to every file and directory is assigned a type of permission . Read | Write | Execute | . We get all this information using ls -l, for example: . $ ls -l total 1112 -rw-r--r-- 1 username staff 557042 Aug 24 21:57 dante.txt -rwxr-xr-x 1 username staff 40 Aug 23 18:36 hello.sh -rw-r--r-- 1 username staff 171 Aug 23 18:28 hello_vnav2020.tar.gz -rw-r--r-- 1 username staff 49 Aug 24 22:55 numbers.txt . The permissions are specified by the 1st field, the ownership is specified by the 3rd and 4th fields. Fo example, the file hello.sh is owned by me (username) and the group is staff. THe permission string is -rwxr-xr-x meaning that: . The owner can read (r), write (w) and execute (x) the file | The group can read and execute | Other can read and execute | . cd . To change the current folder we can use cd (Change Directory). For example cd / moves to the file system root or . cd /home . To move to the parent of the current folder we use cd .., it can also be concatenated like cd ../.. to move two (or more) levels up. To move back to your home folder we use cd ~ (or simply cd). . find . Image you have a folder containing many files and you want to locate a file called findme.txt. To accomplish it you can use . find . -name &quot;findme.txt&quot; . Let’s analyze the command. The . represent the current folder, so we are saying to find to look in the current folder recursively (you can change it with relative or absolute paths) for a file called findme.txt. Find is a powerful tool, you can have complex expression to match files, have a look at find --help. . Edit Filesystem . mkdir . mkdir (make directory) is used to create new, empty directories: let’s create a new dir named newdir . $ mkdir newdir $ ls newdir $ cd newdir . touch . touch was created to modify file timestamps, but it can also be used to quickly create an empty file. You can easily create a newfile.txt with . $ touch newfile.txt $ ls newfile.txt . rm . You can remove any file with rm – be careful, this is non-recoverable! I suggest to add the flag -i to prompt a confirmation message . rm -i newfile.txt rm: remove regular empty file &#39;newfile.txt&#39;? y . You can also remove directories with rm, the only catch is that it returns an error when the folder is not-empty. The common practice, but pretty prone to non-recoverable errors, is to run rm -rf foldername. The command will remove the folder with all its content (r - recursive) forcing the operation (f - force). This operation will not ask for confirmation. You can of course add the flag i (i.e. rm -rfi foldername) but will ask confirmation for every file, this is pretty annoying if the folder contains many files. . cp . Copying file is as simple as running cp (CoPy). If we want to duplicate the file numbers.txt we can run . $ cp numbers.txt numbers_copy.txt $ls numbers.txt numbers_copy.txt . mv . If we want to rename numbers_copy.txt to new_numbers.txt we can run . $ mv numbers_copy.txt new_numbers.txt $ ls new_numbers.txt numbers.txt . With the same command we can also move the file to another location, for example if we want to move numbers.txt to a newly create folder dataset we execute . $ mkdir dataset $ mv numbers.txt dataset/numbers.txt $ ls dataset numbers.txt . Viewing and Editing Files . cat . cat concatenates a list of files and sends them to the standard output stream and is often used to quickly view the content of a file. For example we can inspect the content of the file numbers.txt. . $ cat numbers.txt One Two Three Four Five Six Seven Eight Nine Ten . nano and vim . nano is a minimalistic command-line text editor. It’s a great editor for beginners. More demanding user pefer vim. It’s a powerful and highly customizable text editor (I love it!). I strongly suggest to learn how to use vim, one of the best way to learn vim is to simply run vimtutor in your terminal but if you prefer games try Vim Adventures! . Download, uncompress and execute a script . In this section we will download a compressed file, extract the content, inspect and run a script. . Download . Imagine you have to download (you have to, actually) http://www.mit.edu/~username/hello_vnav19.tar.gz you can use wget. . wget http://www.mit.edu/~username/hello_vnav19.tar.gz . Uncompress . As you see it is a compressed file, to uncompress it we can use tar . tar -xvf hello_vnav2020.tar.gz . The flags xvf are respectively extract, verbose file. Now we would like to run the script. We should first inspect the file (never run a script without inspection), let’s use cat . $ cat hello.sh #!/usr/bin/env bash echo &quot;Hello world!&quot; . The file is not dangerous, it only print something to the terminal. . Run . Before running the script we should verify that we can actually run the script so let’s see its permissions . $ ls -l hello.sh -rw-r--r-- 1 username staff 40 Aug 23 18:36 hello.sh . Ops! This time we have no right to run the script, we have to add it: . chmod +x hello.sh . Let’s check again: . ls -l hello.sh -rwxr-xr-x 1 username staff 40 Aug 23 18:36 hello.sh . Ok, now we can execute the script. To execute the script it’s enough to add ./ before the name of the file to e . $ ./hello.sh Hello world! . Keep in mind. . When you use ./ the bash shell is creating a new shell, child of the current one and executing the code there. This is usually fine, sometimes you need to run a script like it was prompted directly in the current bash, in that case you should use the source command, e.g. source hello.sh . Pipe . The Pipe is a command in Linux that lets you use two or more commands such that output of one command serves as input to the next. In short, the output of each process directly as input to the next one like a pipeline. The symbol | denotes a pipe. . For example, consider the following file: . $ cat numbers.txt One Two Three Four Five Six Seven Eight Nine Ten . We can sort the lines piping cat with sort . $ cat numbers.txt | sort Eight Five Four Nine One Seven Six Ten Three Two . Output redirect . We redirect the output of a command to a file. This is useful when we want to save the output of a program without writing specific code. . The common commands that we use and their results are . command &gt; output.txt | . The standard output stream will be redirected to the file only, it will not be visible in the terminal. If the file already exists, it gets overwritten. . command &amp;&gt; output.txt | . Both the standard output and standard error stream will be redirected to the file only, nothing will be visible in the terminal. If the file already exists, it gets overwritten. . command | tee output.txt | . The standard output stream will be copied to the file, it will still be visible in the terminal. If the file already exists, it gets overwritten. . command |&amp; tee output.txt | . Both the standard output and standard error streams will be copied to the file while still being visible in the terminal. If the file already exists, it gets overwritten. . Moreover. . If you want to append instead of overwrite you can use the double angle brackets &gt;&gt;. With tee instead add the flag -a (e.g. tee -a output.txt). . Superuser . Working with the terminal you wil, sooner or later, get a “Permission denied” error. This occur because you do not have the right permission to run the command. . For example if you try install vim you might get something like . $ apt install sl E: Could not open lock file /var/lib/dpkg/lock-frontend - open (13: Permission denied) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), are you root? . The superuser (usually “root”) is the only person who can install software, to install vim we must elevate ourself to system administrator . The command we need to use is sudo . $ sudo apt install sl [sudo] password for username: Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: sl 0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded. Need to get 26.4 kB of archives. After this operation, 98.3 kB of additional disk space will be used. Get:1 http://us.archive.ubuntu.com/ubuntu bionic/universe amd64 sl amd64 3.03-17build2 [26.4 kB] Fetched 26.4 kB in 0s (250 kB/s) Selecting previously unselected package sl. (Reading database ... 162980 files and directories currently installed.) Preparing to unpack .../sl_3.03-17build2_amd64.deb ... Unpacking sl (3.03-17build2) ... Setting up sl (3.03-17build2) ... Processing triggers for man-db (2.8.3-2ubuntu0.1) ... . Install packages . Ubuntu, like any other Linux distribution based on Debian, use the dpkg packaging system. A packaging system is a way to provide programs and applications for installation. This way, we don’t have to build every program from the source. . APT (Advanced Package Tool) is the command line tool to interact with the packaging system. Installing a package that is available on one of the repository known by the system is as easy as running . sudo apt install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt; . For example if we want to install the package sl we would simply run . sudo apt install sl . Try to run sl now! . Get help . It’s hard remember all commands with all their flags, man command in Linux is used to display the user manual of any command that we can run on the terminal. . Moreover many commands offer an help (for example try to run ls --help). The common ways to summon the help is via the flags -h or --help. . Last but not least, Google is your friend! .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/shell",
    "relUrl": "/lab1/shell"
  },
  "8": {
    "title": "Install Ubuntu 18.04",
    "content": "Install Ubuntu 18.04 . For this and the following labs, you need a (preferably clean) Ubuntu 18.04 LTS (Bionic Beaver) installation (see below). There are plenty of installation guides and tutorials on the web (and, in particular, on YouTube). . Steps . Download the ISO image from ubuntu.com | Create a bootable USB stick How to create a bootable USB stick on Windows | How to create a bootable USB stick on Mac OS | How to create a bootable USB stick on Ubuntu | . | Boot from USB stick and install Install Ubuntu desktop (full erase) | Install Ubuntu alongside Windows (dual boot) | . | Warning. . Partitioning can be tricky if you are installing Linux for the first time. There are plenty of guides for “dual-boot Ubuntu installation” alongside both Windows and OS X. In most cases, you would first need to shrink one of your partitions (e.g., in Windows) and create an “unallocated space” which will be used during the Ubuntu installation process; see, e.g., this guide. . Ask for help if you are unsure. . Ubuntu Setup . Once Linux is installed we need to update all the packages, to do so open a terminal (CTRL+Alt+T) and type . sudo apt update sudo apt upgrade sudo apt install build-essential cmake .",
    "url": "https://mit-spark.github.io/VNAV2020-handouts/lab1/ubuntu",
    "relUrl": "/lab1/ubuntu"
  }
  
}
